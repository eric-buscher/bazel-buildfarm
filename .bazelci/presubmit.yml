---
buildifier: latest
tasks:
  
  # Linting jobs
  format_check:
    name: "Code Format"
    platform: ubuntu1804
    shell_commands:
    - ./.bazelci/format.sh --check
  package_layout:
    name: "Package Layout"
    platform: ubuntu1804
    shell_commands:
    - ./.bazelci/package_name_check.sh
  java_unused_deps_check:
    name: "Java Unused Dependencies"
    platform: ubuntu1804
    shell_commands:
    - ./.bazelci/unused_deps.sh --check
  static_analysis_check:
    name: "Static Analysis"
    platform: ubuntu1804
    shell_commands:
    - ./.bazelci/static_analyze.sh
  code_coverage:
    name: "Code Coverage"
    platform: ubuntu1804
    shell_commands:
    - export BUILDFARM_SKIP_COVERAGE_HOST=true
    - export BUILDFARM_GATE_LCOV_RESULTS=true
    - ./generate_coverage.sh
    
  # Typical unit tests that run across a variety of operation systems.
  ubuntu1604:
    name: "Unit Tests"
    build_targets:
    - "..."
    test_targets:
    - "..."
  ubuntu1804:
    name: "Unit Tests"
    build_targets:
    - "..."
    test_targets:
    - "..."
  macos:
    name: "Unit Tests"
    build_targets:
    - "..."
    test_targets:
    - "..."
  windows:
    name: "Unit Tests"
    build_flags:
    - "--build_tag_filters=-container"
    build_targets:
    - "..."
    test_targets:
    - "..."

  # We want to run the unit tests again inside of a docker container.
  # This is because test cases may behave different while in docker due to user permissions.
  # This is more of a sanity check between a defined docker file and running tests directly on the host.
  ubuntu1604:
    name: "Docker Unit Tests"
    platform: ubuntu1804
    shell_commands:
    - ./.bazelci/docker_unit_test.sh
    
  # Test that buildfarm can build software using the default configurations.
  # It starts the distributed storage backend and buildfarm services.
  # It performs a realistic build on generated cc targets and gating projects.
  integration_test_many:
    name: "Integration Test (Memory)"
    platform: ubuntu1804
    shell_commands:
    - export TEST_SHARD=true
    - export RUN_TEST=./.bazelci/run_generative_cc_many_test.sh
  integration_test_many_shard:
    name: "Integration Test (Shard)"
    platform: ubuntu1804
    shell_commands:
    - export TEST_SHARD=true
    - export RUN_TEST=./.bazelci/run_generative_cc_many_test.sh
    - ./.bazelci/integration_test.sh
  integration_test_abseil:
    name: "Abseil Test (Memory)"
    platform: ubuntu1804
    shell_commands:
    - export TEST_SHARD=true
    - export RUN_TEST=./.bazelci/run_abseil_test.sh
    - ./.bazelci/integration_test.sh
  integration_test_abseil_shard:
    name: "Abseil Test (Shard)"
    platform: ubuntu1804
    shell_commands:
    - export TEST_SHARD=true
    - export RUN_TEST=./.bazelci/run_abseil_test.sh
    - ./.bazelci/integration_test.sh
